#pragma once

#include <type_traits>
#include <utility>

// forward declaration
class DataBuffer
{
};

template <class Any, class = void> struct is_serializable : std::false_type
{
};

template <class T>
struct is_serializable<
    T,
    std::void_t<decltype(serialize(std::declval<const T&>(),
                                   std::declval<DataBuffer&>())),
                decltype(deserialize(std::declval<const DataBuffer&>(),
                                     std::declval<T&>()))> > : std::true_type
{
};

template <class T>
inline constexpr bool is_serializable_v = is_serializable<T>::value;
